(ns steadyhash.maglev
  "Maglev Hash
  Consistent hashing using the 'Maglev Hash' method as described in Google's 2016 Maglev paper.
  - Designed for cases where a lookup table is necessary because the number of nodes is high and latency needs to be minimal.
  - Creates a lookup table where assignment differs among nodes by at most one.
  - We choose the size of the lookup table to be > N * 100 (where N is the number of nodes) to ensure at most a 1% difference in hash space assigned to nodes.
  - See Section 3.4: [Maglev: A Fast and Reliable Software Network Load Balancer](http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/44824.pdf)"
  (:require [steadyhash.lib :refer [next-prime h1 h2]]))

(defn permutations
  "Lazy seq of permutations for a node"
  [m id]
  (let [offset (-> id h1 (mod m))
        skip (-> id h2 (mod (dec m)) inc)]
    (for [j (range m)]
      (-> j (* skip) (+ offset) (mod m)))))

(defn populate
  "Populate Maglev hashing lookup table
  (See Maglev paper page 6)"
  ([nodes] (populate nodes (-> nodes count (* 100) next-prime)))
  ([nodes m]
   (loop [entries {}
          node-seq (cycle (sort nodes))
          preferences (into {} (for [node nodes] [node (permutations m node)]))
          n 0]
     (let [[node & next-nodes] node-seq
           [entry & next-entries] (preferences node)
           next-prefs (assoc preferences node next-entries)]
       (if (= n m)
         (->> entries (into (sorted-map)) vals vec) ; return as a vector
         (if (entries entry) ; If slot already taken,
           (recur entries node-seq next-prefs n) ; try again with same node.
           (recur (assoc entries entry node) next-nodes next-prefs (inc n))))))))

(defn lookup
  "Use a lookup table generated by populate to determine node assigned to x"
  [table x]
  (-> x h1 (mod (count table)) table))

(comment
  ;; Example:
  (def table (populate [:a :b :c :d]))
  (lookup table :foo) ; => :d
  (lookup table :bar) ; => :c

  (frequencies table) ; => {:c 100, :b 100, :d 100, :a 101}

  (->> (pmap (partial lookup table) (range 4e5))
    frequencies)
  ;; => {:d 99547, :a 100924, :c 99628, :b 99901}
)
