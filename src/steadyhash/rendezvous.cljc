(ns steadyhash.rendezvous
  "Rendevous Hash
  Simple algorithm for stable hashing, also known as Highest Random Weight (HRW).
  https://en.wikipedia.org/wiki/Rendezvous_hashing
   - Each nodes assignments remain constant when view is the same
   - When a node enters/leaves, most buckets remain with the same node. i.e.:
     - New nodes take a few assignments from each of the existing nodes.
     - Assignments belonging to dropped nodes are divied up among remaining nodes.
   - Only piece of information exchanged is peer view
   - Remains exactly as consistant as the peer view
   - Could easily be modified to assign N nodes to each bucket"
  (:require [steadyhash.lib :as lib :refer [next-prime h1]]))

(defn highest-random-weight
  "Highest Random Weight.
  - For each node, concat x with node-id, hashing the result
  - Return the node with the greatest resulting hash value"
  [nodes x]
  (->> (for [n nodes] [n, (h1 (str n x))])
    (apply max-key second)
    first))

(defn populate
  ([nodes] (populate nodes (-> nodes count (* 100) next-prime)))
  ([nodes m] (into [] (map (partial highest-random-weight nodes) (range m)))))

(defn lookup
  "Use a lookup table generated by populate to determine node assigned to x"
  [table x]
  (-> x h1 (mod (count table)) table))

(comment
  ;; Example:
  (def nodes [:a :b :c :d])
  (highest-random-weight nodes :foo) ; => :c

  (->> (pmap (partial highest-random-weight nodes) (range 4e5))
    frequencies)
  ;; => {:a 99358, :c 100300, :b 99871, :d 100471}

  (def table (populate nodes))
  (lookup table :foo) ; => :a
  (lookup table :bar) ; => :b

  (frequencies table) ; => {:a 109, :c 109, :b 99, :d 84}

  (->> (pmap (partial lookup table) (range 4e5))
    frequencies)
  ;; => {:b 98564, :d 83461, :a 108887, :c 109088}
)
